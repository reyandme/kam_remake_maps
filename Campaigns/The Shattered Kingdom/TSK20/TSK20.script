//-- TSK20 --//
//08.11.2019

{$I difficulty.script}

//Gives AI-Players Units a Random Hunger Level (2/3 to Max)
procedure UnitsRandomHungerSet();
var 
	aUnits: array of Integer;
	i, iGroup: Integer;
	iPlayerLoop: Byte;
begin
for iPlayerLoop := 0 to States.StatPlayerCount()-1 do
	begin
		if States.PlayerIsAI(iPlayerLoop) then
		begin
			aUnits := States.PlayerGetAllUnits(iPlayerLoop);
			for i := 0 to Length(aUnits)-1 do
			begin
				if States.UnitsGroup(aUnits[i]) = -1 then
				begin
					Actions.UnitHungerSet(aUnits[i], States.UnitMaxHunger/2 + States.KaMRandomI(States.UnitMaxHunger/2 +1));
				end else
				begin
					iGroup := States.UnitsGroup(aUnits[i]);
					if States.GroupMember(iGroup, 0) = aUnits[i] then
						Actions.GroupHungerSet(iGroup, States.UnitMaxHunger/2 + States.KaMRandomI(States.UnitMaxHunger/2 +1));
				end;
			end;
		end;
	end;
end;

//UnAllow ALL Buildings for specified Player
procedure LockBuildings(iPlayer: Byte);
var i: Byte;
begin
	for i := 0 to 29 do
		if i <> 26 then //26 is not in use
			Actions.HouseAllow(iPlayer, i, false);
	Actions.HouseUnlock(iPlayer, 11); //Storehouse always unlocked
end;

//Use Traditionl Unlock Order for Houses (Overwrites Static Script settings: Comment out Houses that are supposed to be blocked here!)
procedure TraditionalUnlock(iPlayer: Byte; iHouseID: Integer);
begin
	case States.HouseType(iHouseID) of
		0: 	begin //Sawmill
				// Actions.HouseAllow(iPlayer, 17, true); //Watch Tower (After Sawmill this time!)
				Actions.HouseUnlock(iPlayer, 17); //Watch Tower (After Sawmill this time!)
				Actions.HouseUnlock(iPlayer, 4); //Iron Mine
				Actions.HouseUnlock(iPlayer, 5); //Gold Mine
				Actions.HouseUnlock(iPlayer, 3); //Coal Mine
				Actions.HouseUnlock(iPlayer, 28); //Vineyard
				Actions.HouseUnlock(iPlayer, 8); //Farm
				Actions.HouseUnlock(iPlayer, 19); //Weapons Workshop
				Actions.HouseUnlock(iPlayer, 21); //Barracks	
			//	Actions.HouseUnlock(iPlayer, 6); //Fisherman
			end;
		1: 	begin // Iron Smithy
				Actions.HouseUnlock(iPlayer, 2); //Weapon Smithy
				Actions.HouseUnlock(iPlayer, 10); //Armor Smithy
			end;
		2: exit; // Weapon Smithy
		3: exit; //Coal Mine
		4: Actions.HouseUnlock(iPlayer, 1); //Iron Mine -> Iron Smithy
		5: Actions.HouseUnlock(iPlayer, 15); //Gold Mine -> Metallurgist
		6: exit; //Fisherman's Hut
		7: exit; //Bakery
		8: 	begin //Farm
				Actions.HouseUnlock(iPlayer, 12); //Stables
				Actions.HouseUnlock(iPlayer, 16); //Swine Farm
				Actions.HouseUnlock(iPlayer, 22); //Mill
			end;
		9: Actions.HouseUnlock(iPlayer, 0); //Woodcutter -> Sawmill
		10: exit; //Armor Smithy
		11: Actions.HouseUnlock(iPlayer, 13); //Storehouse -> School
		12: exit; //Stables
		13: Actions.HouseUnlock(iPlayer, 27); //School -> Inn
		14: begin //Quarry
				Actions.HouseUnlock(iPlayer, 9); //Woodcutter
				//Actions.HouseUnlock(iPlayer, 17); //Watch Tower
			end;
		15: exit; //Metallurgist's
		16:	begin //Swine Farm
				Actions.HouseUnlock(iPlayer, 24); //Butcher
				Actions.HouseUnlock(iPlayer, 25); //Tannery
			end;
		17: exit; //Watch Tower
		18: exit; //Townhall
		19: exit; //Weapons Workshop
		20: exit; //Armor Workshop
		21: exit; //Barracks
		22: Actions.HouseUnlock(iPlayer, 7); //Mill -> Bakery
		23: exit; //Vehicles Workshop
		24: exit;//Butcher's
		25: Actions.HouseUnlock(iPlayer, 20); //Tannery -> Armor Workshop
		26: exit; //Unused
		27: Actions.HouseUnlock(iPlayer, 9); //Inn -> Woodcutter (just this time: No Stone in the Map!)
		28: exit; //Vineyard
		29: exit; //Market
	end;
end;

procedure SetupAI();
var
	p: Byte;
	h: SmallInt;
	aHouses: array of Integer;
begin
	for p := 0 to States.StatPlayerCount() -1 do
	begin
		if States.PlayerIsAI(p) then
		begin
			//Adjust Ware Distribution
			//Iron
			Actions.PlayerWareDistribution(p, 6, 2, 5); //Weapon Smithy
			Actions.PlayerWareDistribution(p, 6, 10, 5); //Armor smithy
			//Coal
			Actions.PlayerWareDistribution(p, 5, 1, 5);	//Iron smity
			Actions.PlayerWareDistribution(p, 5, 15, 5); //Metallurgist
			Actions.PlayerWareDistribution(p, 5, 2, 5);	//Weapon Smithy
			Actions.PlayerWareDistribution(p, 5, 10, 5); //Armor Smithy
			//Timber
			Actions.PlayerWareDistribution(p, 2, 20, 5); //Armory workshop
			Actions.PlayerWareDistribution(p, 2, 19, 5); //Weapon Workshop
			//Corn
			Actions.PlayerWareDistribution(p, 9, 22, 5); //Mill
			Actions.PlayerWareDistribution(p, 9, 16, 5); //Swine farm
			Actions.PlayerWareDistribution(p, 9, 12, 5); //Stables
			//Block Wares in Storehouses
			aHouses := States.PlayerGetAllHouses(p);
			for h := 0 to Length(aHouses) -1 do
			begin
				if States.HouseType(aHouses[h]) = 11 then
				begin
					Actions.HouseWareBlock(aHouses[h], 0, true); //Treetrunk
					//Actions.HouseWareBlock(aHouses[h], 1, true); //Stone
					//Actions.HouseWareBlock(aHouses[h], 2, true); //Timber
					Actions.HouseWareBlock(aHouses[h], 3, true); //Iron Ore
					Actions.HouseWareBlock(aHouses[h], 4, true); //Gold Ore
					Actions.HouseWareBlock(aHouses[h], 5, true); //Coal
					Actions.HouseWareBlock(aHouses[h], 6, true); //Iron
					//Actions.HouseWareBlock(aHouses[h], 7, true); //Gold
					//Actions.HouseWareBlock(aHouses[h], 8, true); //Wine
					Actions.HouseWareBlock(aHouses[h], 9, true); //Corn
					//Actions.HouseWareBlock(aHouses[h], 10, true); //Loaves
					Actions.HouseWareBlock(aHouses[h], 11, true); //Flour
					Actions.HouseWareBlock(aHouses[h], 12, true); //Leather
					//Actions.HouseWareBlock(aHouses[h], 13, true); //Sausages
					Actions.HouseWareBlock(aHouses[h], 14, true); //Pig
					//Actions.HouseWareBlock(aHouses[h], 15, true); //Skin
					//16-26 = Military Equipment
					//Actions.HouseWareBlock(aHouses[h], 15, true); //Fish
				end;
			end;
		end;
	end;
end;


procedure OnMissionStart();
var
	h: Integer;
	aHouses: array of Integer;
begin
	LockBuildings(0);
	//Set Hunger Level of AIs
	UnitsRandomHungerSet();
	//Setup AI Defaults
	SetupAI();
	//Apply Diffculty
	case States.MissionDifficulty() of
		mdEasy2:
		begin
			IncreaseGroupSize(0, 0);
			IncreaseGroupSize(1, 0);
		end;
		mdEasy1:
		begin
			IncreaseTargetGroupSize(0, 16, 119, 0); //Barbs
			IncreaseTargetGroupSize(0, 57, 134, 0); //Pikes
			IncreaseTargetGroupSize(0, 68, 140, 0); //Swords
			IncreaseTargetGroupSize(1, 146, 150, 0); //Ally Groups
			IncreaseTargetGroupSize(1, 155, 157, 0);
		end;
		mdHard1:
		begin
			IncreaseTargetGroupSize(7, 25, 100, 0); //Pikes @ Barbs
			IncreaseTargetGroupSize(7, 41, 111, 0); //Swords
			IncreaseTargetGroupSize(5, 95, 116, 0); //Pikes
			IncreaseTargetGroupSize(5, 77, 115, 0); //Swords
			IncreaseTargetGroupSize(6, 152, 115, 0); //Knights @Ally
			IncreaseTargetGroupSize(6, 123, 129, 0);
		end;
		mdHard2:
		begin
			IncreaseTargetGroupSize(7, 25, 100, 0); //Pikes @ Barbs
			IncreaseTargetGroupSize(7, 41, 111, 0); //Swords
			IncreaseTargetGroupSize(7, 31, 111, 0); //Pikes @ Barbs
			IncreaseTargetGroupSize(5, 100, 101, 0); //Knights @Storehouse
			IncreaseTargetGroupSize(5, 95, 116, 0); //Pikes
			IncreaseTargetGroupSize(5, 77, 115, 0); //Swords
			IncreaseTargetGroupSize(6, 152, 115, 0); //Knights @Ally
			IncreaseTargetGroupSize(6, 123, 129, 0);
			IncreaseTargetGroupSize(6, 141, 125, 0);
		end;
	end;
	//Unlock Houses
	aHouses := States.PlayerGetAllHouses(0);
	for h := 0 to Length(aHouses) -1 do
		TraditionalUnlock(0, aHouses[h]);
	//Disables Sharing Fog With Ally
	Actions.PlayerShareFog(0, 1, False);
	Actions.PlayerShareFog(1, 0, False);
end;

procedure OnHouseBuilt(aHouseID: Integer);
var iOwner: Byte;
begin
	iOwner := States.HouseOwner(aHouseID);
	if iOwner = 0 then
		TraditionalUnlock(iOwner, aHouseID);
end;

procedure OnTick();
begin
	//Message On Mission Start
	if States.GameTime = 10 then
		Actions.ShowMsg(0, '<$0>');
end;
