{$I superunits.script}

type TDisarmPosition = record
	x: integer;
	y: integer;
	uType: integer;
	owner: integer;
	dir: integer;
end;

type TDemand = record
	uTypes: array of integer;
end;

const villageCount = 8;

var victory, funcFired:boolean;
var positions: array of TDisarmPosition;
var winCondGroups: array[0..2] of integer;
var cavalry_light: array[0..6] of integer;
var cavalry_heavy: array[0..5] of integer;
var spawnCoord: array[0..11] of TDisarmPosition;
var archers: array[0..1] of integer;
var Time, vId: integer;
var cinematicOrder, cinematicStartTime : integer;
var spawnStop, timerstart, esoleAttack: boolean;

function Timer : String;
var secTime, h, m, s : Integer;
var currentTime : String;
begin
	Time := Time - 1;
	secTime := Time div 10;
	h := secTime div 3600;
	secTime := secTime - (h * 3600);
	m := secTime div 60;
	secTime := secTime - (m * 60);
	s := secTime;
	
	currentTime := '';
	if (h > 0) then currentTime := currentTime + IntToStr(h) + 'h ';
	if (m > 0) then currentTime := currentTime + IntToStr(m) + 'm ';
	currentTime := currentTime + IntToStr(s) + 's ';
	
	Result := currentTime;
end;

procedure ExecuteCinematic;
var groupId: integer;
begin
	if (cinematicOrder = 1) then begin
		groupId := States.ClosestGroup(1, 202, 12, -1);
		Actions.CinematicStart(0);
		Actions.CinematicPanTo(0, States.UnitPositionX(States.GroupMember(groupId, 0)), States.UnitPositionY(States.GroupMember(groupId, 0)), 0);
		cinematicStartTime := States.GameTime + 80;
		cinematicOrder := 2;
	end
	else if ((cinematicOrder = 2) AND (cinematicStartTime = States.GameTime)) then begin
		groupId := States.ClosestUnit(6, 202, 12, -1);
		Actions.CinematicPanTo(0, States.UnitPositionX(groupId), States.UnitPositionY(groupId), 5);
		cinematicOrder := 3;
		cinematicStartTime := States.GameTime + 80;
		Actions.ShowMsg(0, '<$2>');
		Actions.AIAutoRepair(1, true);
		Actions.AIAutoRepair(2, true);
		Actions.AIAutoRepair(3, true);
		Actions.AIAutoRepair(4, true);
		Actions.AIAutoRepair(5, true);
		Actions.AIAutoRepair(6, true);
		Actions.AIAutoRepair(7, true);
		Actions.AIAutoRepair(8, true);
	end
	else if ((cinematicOrder = 3) AND (States.GameTime = cinematicStartTime)) then begin
		groupId := States.ClosestUnit(8, 193, 119, -1);
		Actions.CinematicPanTo(0, States.UnitPositionX(groupId), States.UnitPositionY(groupId), 5);
		cinematicOrder := 4;
		cinematicStartTime := States.GameTime + 45;
	end
	else if ((cinematicOrder = 4) AND (States.GameTime = cinematicStartTime)) then begin
		Actions.CinematicEnd(0);
		cinematicOrder := 5;
		cinematicStartTime := States.GameTime + 100;
	end
	else if ((cinematicOrder = 5) AND (States.GameTime = cinematicStartTime)) then begin
		Actions.PlayerWin([0], false);
		cinematicOrder := -1;
		cinematicStartTime := -1;
	end
end;

procedure AutoFeed;
var i, j : integer;
var groups : array of integer;
begin
	for i := 1 to 11 do begin
		if (i = 2) then begin
			groups := States.PlayerGetAllUnits(i);
			for j := 0 to Length(groups) - 1 do begin
				Actions.GroupHungerSet(groups[j], States.UnitMaxHunger);
			end;
		end
		else begin
			groups := States.PlayerGetAllGroups(i);
			for j := 0 to Length(groups) - 1 do begin
				Actions.GroupHungerSet(groups[j], States.UnitMaxHunger);
			end;
		end;
	end;
end;

procedure SendToBattle;
var t1, t2, t3, i:integer;
begin
	t1 := States.KaMRandomI(6);
	t2 := States.KaMRandomI(5);
	t3 := States.KaMRandomI(1);
	for i := 1 to villageCount do begin
		if (spawnCoord[i].x > 0) then begin
			if (States.StatUnitMultipleTypesCount(i, [17, 18]) < 20) then begin
				Actions.GiveGroup(i, archers[t3], spawnCoord[i].x, spawnCoord[i].y, 3, 10, 5);
			end;

			if (States.StatUnitMultipleTypesCount(i, [14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27]) < 50) then begin
				Actions.GiveGroup(i, cavalry_light[t1], spawnCoord[i].x, spawnCoord[i].y, 3, 20, 5);
				Actions.GiveGroup(i, cavalry_heavy[t2], spawnCoord[i].x, spawnCoord[i].y, 3, 20, 5);
			end;
		end;
	end;
end;

procedure Win;
var units, groups, houses: array of integer;
var i, j, k, idx, member, occT, serfCount, laborerCount: integer;
var demands: array[1..8] of TDemand;
begin
	if ((States.GroupDead(winCondGroups[0])) AND (States.GroupDead(winCondGroups[1])) AND (States.GroupDead(winCondGroups[2])) AND (victory = false)) then begin
		cinematicOrder := 1;
		cinematicStartTime := States.GameTime + 80;
		victory := true;
		Actions.OverlayTextSet(0, '');
		vId := 1;
	end; 
	
	if ((cinematicOrder > 0) AND (cinematicStartTime = States.GameTime) AND (funcFired = false)) then begin
		cinematicStartTime := States.GameTime + 5;
		houses := States.PlayerGetAllHouses(vId);
		for j := 0 to Length(houses) - 1 do begin
			occT := States.HouseTypeToOccupantType(States.HouseType(houses[j]));
			if (occT > 0) then begin
				idx := Length(demands[vId].uTypes);
				SetLength(demands[vId].uTypes, idx + 1);
				demands[vId].uTypes[idx] := occT;
			end;
		end;

		units := States.PlayerGetAllUnits(vId);
		for j := 0 to Length(units) - 1 do begin
			if (States.UnitType(units[j]) <= 12) then begin
				Actions.UnitKill(units[j], true);
			end;
		end;
		
		groups := States.PlayerGetAllGroups(vId);
		serfCount := 0;
		laborerCount := 0;
		k := 0;
		
		for i := 0 to Length(groups) - 1 do begin
			for j := 0 to States.GroupMemberCount(groups[i]) - 1 do begin
				idx := Length(positions);
				SetLength(positions, idx + 1);
				member := States.GroupMember(groups[i], j);
				positions[idx].x := States.UnitPositionX(member);
				positions[idx].y := States.UnitPositionY(member);
				positions[idx].dir := States.UnitDirection(member);
				positions[idx].owner := vId;
				
				if ((k >= 0) AND (k < Length(demands[vId].uTypes))) then begin
					positions[idx].uType := demands[vId].uTypes[k];
					k := k + 1;
				end
				else begin
					if (15 - serfCount > 0) then begin
						positions[idx].uType := 0;
						serfCount := serfCount + 1;
					end
					else if (15 - laborerCount > 0) then begin
						positions[idx].uType := 9;
						laborerCount := laborerCount + 1;
					end
					else begin
						positions[idx].uType := 13;
					end;
				end;
			end;
			
			Actions.GroupKillAll(groups[i], true);
		end;
		
		if (vId = 1) then begin
			for i := 0 to 8 do begin
				for j := 1 to 8 do begin
					if (i <> j) then Actions.PlayerAllianceChange(i, j, true, true);
				end;
			end;
			
			spawnStop := true;
		end;

		funcFired := vId = villageCount
		vId := vId + 1;
	end;
end;

procedure OnTick;
var i, j:integer;
begin
	if (esoleAttack = false) then begin
		Win;
		if (States.GameTime mod 600 = 0) then AutoFeed;
		if ((States.GameTime mod 300 = 0) AND (spawnStop = false)) then SendToBattle;
		if (States.GameTime = 1200) then begin
			timerstart := true;
			Actions.ShowMsgGoto(0, 222, 2, '<$1>');
			Actions.FogRevealCircle(0, 222, 2, 5);
		end;
		if ((timerstart) AND (Time > 0) AND (victory = false)) then Actions.OverlayTextSet(0, '<$0>: ' + Timer);
		if (Time <= 0) then begin
			esoleAttack := true;
			spawnStop := true;
			for i := 9 to 11 do begin
				for j := 0 to 8 do Actions.PlayerAllianceChange(i, j, true, false);
			end;
			Actions.ShowMsg(0, '<$3>');
			Actions.MapTileObjectSet(205, 8, 255);
			Actions.MapTileObjectSet(205, 9, 255);
		end;
	end;
	
	if (victory) then ExecuteCinematic();
	SU_ExecuteKill();
end;

procedure OnMissionStart;
var i:integer;
begin
	for i := 0 to villageCount do Actions.PlayerAddDefaultGoals(i, false);
	Actions.PlayerShareFog(9, 0, false);
	Actions.PlayerShareFog(10, 0, false);
	Actions.PlayerShareFog(11, 0, false);
	Actions.FogCoverCircle(0, 1, 1, 70);
	cinematicStartTime := 1;
	cinematicOrder := -1;
	victory := false;
	funcFired := false;
	spawnStop := false;
	esoleAttack := false;
	SU_RegisterSuperGroup(States.GroupAt(5, 152));
	winCondGroups[0] := States.GroupAt(221, 1);
	winCondGroups[1] := States.GroupAt(222, 2);
	winCondGroups[2] := States.GroupAt(223, 3);
	cavalry_light[0] := 14;
	cavalry_light[1] := 15;
	cavalry_light[2] := 19;
	cavalry_light[3] := 21;
	cavalry_light[4] := 24;
	cavalry_light[5] := 25;
	cavalry_light[6] := 27;
	cavalry_heavy[0] := 16;
	cavalry_heavy[1] := 20;
	cavalry_heavy[2] := 22;
	cavalry_heavy[3] := 23;
	cavalry_heavy[4] := 26;
	cavalry_heavy[5] := 16;
	archers[0] := 17;
	archers[1] := 18;
	spawnCoord[1].x := 214;
	spawnCoord[1].y := 69;
	spawnCoord[3].x := 167;
	spawnCoord[3].y := 7;
	spawnCoord[4].x := 109;
	spawnCoord[4].y := 60;
	spawnCoord[5].x := 83;
	spawnCoord[5].y := 24;
	spawnCoord[6].x := 65;
	spawnCoord[6].y := 79;
	spawnCoord[7].x := 156;
	spawnCoord[7].y := 104;
	spawnCoord[8].x := 221;
	spawnCoord[8].y := 151;
	timerstart := false;
	Time := 9000;
	Actions.ShowMsg(0, '<$4>');
end;

procedure OnUnitAfterDied(aUnitType: integer; aOwner: Integer; aX:integer; aY:integer);
var i:integer;
begin
	if (victory) then begin
		for i := 0 to Length(positions) - 1 do begin
			if ((positions[i].x = aX) AND (positions[i].y = aY)) then begin
				Actions.GiveUnit(positions[i].owner, positions[i].uType, positions[i].x, positions[i].y, positions[i].dir);
			end;
		end;
	end;
end;

procedure OnUnitDied(aUnit: Integer; aAttacker: Integer);
begin
	SU_ExecuteSuperunitDie(aUnit, aAttacker);
end;

procedure OnUnitAttacked(aUnit: Integer; aAttacker: Integer);
begin
	SU_ExecuteUnitAttack(aUnit, aAttacker);
end; 
 
{$I FixupUnwalkable.script} 
