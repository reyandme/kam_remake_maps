//-- Helpers --//
//01.04.2025


function MinToTick(Minutes: Single): Integer;
begin
	Result := Round(Minutes *600);
end;


//Sets the HungerLevel of AI Players Units
procedure UnitsRandomHungerSet();
var
	aUnits, aGroups: array of Integer;
	i, p: Integer;
	UnitMaxHunger: Integer;
begin
    UnitMaxHunger := States.UnitMaxHunger();

	for p := 0 to States.StatPlayerCount() -1 do
	begin
		if States.PlayerIsAI(p) then
		begin
			aUnits := States.PlayerGetAllUnits(p);
			for i := 0 to High(aUnits) do
			begin
				if States.UnitsGroup(aUnits[i]) = -1 then
				begin
					Actions.UnitHungerSet(aUnits[i], Utils.RandomRangeI(UnitMaxHunger/5, UnitMaxHunger));
				end;
			end;

			aGroups := States.PlayerGetAllGroups(p);
			for i := 0 to High(aGroups) do
			begin
				if States.IsMissionFightType() then
            	begin
            		Actions.GroupHungerSet(aGroups[i], UnitMaxHunger);
            	end else
            	begin
					Actions.GroupHungerSet(aGroups[i], Utils.RandomRangeI(UnitMaxHunger/4, UnitMaxHunger));
				end;
			end;
		end;
	end;
end;


//Returns Sight Ranges for Houses
function HouseSightRange(aHouseID: Integer): Byte;
begin
	case States.HouseType(aHouseID) of
		0..10, 12..16, 19, 20, 22..29: Result := 10; //Normal Houses
		11, 18, 21: Result := 13; //Barracks/Storehouse/Townhall
		17: Result := 18; //Tower
	end;
end;


//Returns Sight Ranges for Units
function UnitSightRange(aUnitsID: Integer): Byte;
begin
	case States.UnitType(aUnitsID) of
		0..13: Result := 4; //Civilians
		14..20, 22..27: Result := 9; //Fighting Units
		21: Result := 16; //Scout
		//28..37: Animals
	end;
end;


procedure ModEquipRate(Player: Integer; RecruitType: Byte; Percent: Single);
begin
	Actions.AIEquipRate(Player, RecruitType, Round(States.AIEquipRate(Player, RecruitType) *Percent));
end;


procedure ModRecruitDelay(Player: Integer; Percent: Single);
begin
	Actions.AIRecruitDelay(Player, Round(States.AIRecruitDelay(Player) *Percent));
end;


procedure GiveAllWeapons(Player, WeaponType: Byte; Count: Integer);
begin
	case WeaponType of
		0: begin //Leather
			Actions.GiveWeaponsEx(Player, wtWoodenShield, Count);
			Actions.GiveWeaponsEx(Player, wtLeatherArmor, Count);
			Actions.GiveWeaponsEx(Player, wtAxe, Count);
			Actions.GiveWeaponsEx(Player, wtLance, Count);
			Actions.GiveWeaponsEx(Player, wtBow, Count);
			Actions.GiveWeaponsEx(Player, wtHorse, Count);
		end;
		1: begin //Iron
			Actions.GiveWeaponsEx(Player, wtIronShield, Count);
			Actions.GiveWeaponsEx(Player, wtIronArmor, Count);
			Actions.GiveWeaponsEx(Player, wtSword, Count);
			Actions.GiveWeaponsEx(Player, wtPike, Count);
			Actions.GiveWeaponsEx(Player, wtCrossbow, Count);
			Actions.GiveWeaponsEx(Player, wtHorse, Count);
		end;
	end;
end;