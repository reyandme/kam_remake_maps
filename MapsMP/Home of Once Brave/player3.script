{$EVENT evtMissionStart:Player3OnMissionStart}
{$EVENT evtTick:Player3OnTick}
{$EVENT evtHouseBuilt:Player3OnHouseBuilt}
{$EVENT evtHouseDestroyed:Player3OnHouseDestroyed}
{$EVENT evtHousePlanPlaced:Player3OnHousePlanPlaced}


const
	COST_BARBARIAN = 8;
	PLAYER = 3;
	
	//Amount of Goldmines
	GOLD_MINES = 5;
	
	//Amount of Defence Positons for each GroupType
	DP_MELEE = 2;
	DP_ANTIHORSE = 3;
	DP_RANGED = 1;
	DP_MOUNTED = 3;
	
	
var
	Townhall, Market: Integer;
	RecruitRate, RecruitDelay: Word;
	TotalArmyLimit: Word;
	
	aCustomPosition: TKMPoint;
	
	bTownhallDestroyed, bMarketDestroyed: Boolean;
	bSwitchTrade: Boolean;



function GetUnitLimit(UnitType, aPlayer: Byte): Byte;
var
	GroupType, DefencePositionAmount: Byte;
	outCount, outColums: Integer;
begin
	case UnitType of
		23: GroupType := 0; //Melee
		24: GroupType := 1; //Anit-Horse
		25: GroupType := 2; //Ranged
		27: GroupType := 3; //Mounted
	end;
	case GroupType of
		0: DefencePositionAmount := DP_MELEE;
		1: DefencePositionAmount := DP_ANTIHORSE;
		2: DefencePositionAmount := DP_RANGED;
		3: DefencePositionAmount := DP_MOUNTED;
	end;
	States.AIGroupsFormationGet(aPlayer, GroupType, outCount, outColums);
	Result := outCount *DefencePositionAmount;
end;


function GetRandomTownHallUnitID(): Byte;
begin
	case States.KaMRandomI(4) of
		0: 	Result := 23; //Barbarian
		1:	Result := 27; //Vagabond
		2:	Result := 25; //Rogue
		3:	Result := 24; //Rebel
	end;
end;


procedure Player3OnMissionStart();
var
	aHouses: array of Integer;
	h: Word;
begin
	//Identify Market and Townhall
	aHouses := States.PlayerGetAllHouses(PLAYER);
	for h := 0 to Length(aHouses) -1 do
		case States.HouseType(aHouses[h]) of
			18: Townhall := aHouses[h];
			29: Market := aHouses[h];
		end;

	//Set Townhall Gold Amount: 2x Barbarian Cost
	Actions.HouseTownHallMaxGold(Townhall, COST_BARBARIAN *2);
	//Set Trade: Skins -> Coal
	Actions.MarketSetTrade(Market, 15, 5, 999);
	
	//Calculate Total Army Limit
	TotalArmyLimit := GetUnitLimit(23, PLAYER) +GetUnitLimit(24, PLAYER) +GetUnitLimit(25, PLAYER) +GetUnitLimit(27, PLAYER);
		
	//Save Values
	RecruitRate := States.AIEquipRate(PLAYER, 0);
	RecruitDelay := States.AIRecruitDelay(PLAYER);
	
	//Set Random Target for attacks
	case States.KaMRandomI(3) of
		0: Actions.AIStartPosition(PLAYER, 87, 44); //Player8
		1: Actions.AIStartPosition(PLAYER, 66, 130); //Player9
		2: Actions.AIStartPosition(PLAYER, 13, 234); //Player13
	end;
end;



procedure Player3OnTick();
var
	GameTime: Word;
	RandomUnitType: Byte;
	aHouses: array of Integer;
	h, EmptyGoldMines: Byte;
begin
	GameTime := States.GameTime();
	
	if not bTownhallDestroyed then
		if GameTime >= RecruitDelay then
			//Is there enough Gold to build even the most expensive Unit?
			if States.HouseResourceAmount(Townhall, 7) >= COST_BARBARIAN then
				//Limit production by RR
				if GameTime mod RecruitRate = 0 then
					//Build Units till Total Army Limit is reached
					while States.StatUnitMultipleTypesCount(PLAYER, [23, 24, 25, 27]) < TotalArmyLimit do //Only check Townhall Units
					begin
						RandomUnitType := GetRandomTownHallUnitID();
						//Check if Unit is needed
						if States.StatUnitTypeCount(PLAYER, RandomUnitType) < GetUnitLimit(RandomUnitType, PLAYER) then 
						begin
							Actions.HouseTownHallEquip(Townhall, RandomUnitType, 1);
							break;
						end;
					end;
		//Actions.OverlayTextSet(0, 'GoldAmount: ' +inttostr(States.HouseResourceAmount(Townhall, 7)));
	
	if not bMarketDestroyed then
		//Check every Minute if Gold Mines can still reach resources
		if not bSwitchTrade then
			if GameTime mod 600 = 0 then
			begin
				aHouses := States.PlayerGetAllHouses(PLAYER);
				for h := 0 to Length(aHouses) -1 do
					if States.HouseType(aHouses[h]) = 5 then //Gold Mine
						if not States.HouseCanReachResources(aHouses[h]) then
							Inc(EmptyGoldMines);
				//If all of them are empty, set new trade
				if EmptyGoldMines = GOLD_MINES then
				begin
					Actions.MarketSetTrade(Market, 15, 7, 999); //Set Trade: Skin -> Goldchest
					bSwitchTrade := true;
				end;
			end;
			
	if GameTime = RecruitDelay then
	begin
		//Set AI Attack
		AddAIAttack(PLAYER, false, 0, 1, 2, 1, 0, attClosestBuildingFromStartPos, aCustomPosition); //Once
		
		//Set Equiprate and repeating attacks in accordance to Difficulty
		case States.MissionDifficulty() of
			mdEasy3: begin
				Actions.AIWorkerLimit(PLAYER, 6);
				Actions.AIEquipRate(Player, 0, 300); //2Units/Minute
				AddAIAttack(PLAYER, true, GetEffectiveEquipRate(PLAYER) -1, 2, 3, 1, 0, attClosestBuildingFromStartPos, aCustomPosition); //Repeating
				AddAIAttack(PLAYER, true, GetEffectiveEquipRate(PLAYER) -1, 0, 0, 0, 3, attClosestBuildingFromStartPos, aCustomPosition); //Repeating
			end;
			mdEasy2: begin
				Actions.AIWorkerLimit(PLAYER, 4);
				Actions.AIEquipRate(Player, 0, 400);
				AddAIAttack(PLAYER, true, GetEffectiveEquipRate(PLAYER) -1, 2, 3, 1, 0, attClosestBuildingFromStartPos, aCustomPosition); //Repeating
				AddAIAttack(PLAYER, true, GetEffectiveEquipRate(PLAYER) -1, 0, 0, 0, 3, attClosestBuildingFromStartPos, aCustomPosition); //Repeating
			end;
			mdEasy1: begin
				Actions.AIWorkerLimit(PLAYER, 2);
				Actions.AIEquipRate(Player, 0, 500);
				AddAIAttack(PLAYER, true, GetEffectiveEquipRate(PLAYER) -1, 2, 2, 1, 0, attClosestBuildingFromStartPos, aCustomPosition); //Repeating
				AddAIAttack(PLAYER, true, GetEffectiveEquipRate(PLAYER) -1, 0, 0, 0, 3, attClosestBuildingFromStartPos, aCustomPosition); //Repeating
			end;
			mdNormal: begin
				Actions.AIEquipRate(Player, 0, 600); //1Unit/Minute
				AddAIAttack(PLAYER, true, GetEffectiveEquipRate(PLAYER) -1, 2, 2, 1, 0, attClosestBuildingFromStartPos, aCustomPosition); //Repeating
				AddAIAttack(PLAYER, true, GetEffectiveEquipRate(PLAYER) -1, 0, 0, 0, 3, attClosestBuildingFromStartPos, aCustomPosition); //Repeating
			end;
			mdHard1: begin
				Actions.AIEquipRate(Player, 0, 700);
				AddAIAttack(PLAYER, true, GetEffectiveEquipRate(PLAYER) -1, 1, 3, 1, 0, attClosestBuildingFromStartPos, aCustomPosition); //Repeating
				AddAIAttack(PLAYER, true, GetEffectiveEquipRate(PLAYER) -1, 0, 0, 0, 3, attClosestBuildingFromStartPos, aCustomPosition); //Repeating
			end;
			mdHard2: begin
				Actions.AIEquipRate(Player, 0, 800);
				AddAIAttack(PLAYER, true, GetEffectiveEquipRate(PLAYER) -1, 1, 3, 1, 0, attClosestBuildingFromStartPos, aCustomPosition); //Repeating
				AddAIAttack(PLAYER, true, GetEffectiveEquipRate(PLAYER) -1, 0, 0, 0, 3, attClosestBuildingFromStartPos, aCustomPosition); //Repeating
			end;
			mdHard3: begin
				Actions.AIEquipRate(Player, 0, 900);
				AddAIAttack(PLAYER, true, GetEffectiveEquipRate(PLAYER) -1, 1, 2, 1, 0, attClosestBuildingFromStartPos, aCustomPosition); //Repeating
				AddAIAttack(PLAYER, true, GetEffectiveEquipRate(PLAYER) -1, 0, 0, 0, 3, attClosestBuildingFromStartPos, aCustomPosition); //Repeating
			end;
		end;
	end;
end;



//Update HouseIDs for Market and Townhall if they are rebuilt
procedure Player3OnHouseBuilt(aHouse: Integer);
var
	HouseOwner: Byte;
begin
	HouseOwner := States.HouseOwner(aHouse);
	if HouseOwner = PLAYER then
	begin
		case States.HouseType(aHouse) of
			18: begin
				Townhall := aHouse;
				bTownhallDestroyed := false;
				//Reset defaults
				Actions.HouseTownHallMaxGold(Townhall, COST_BARBARIAN *2);
			end;
			29: begin
				Market := aHouse;
				bMarketDestroyed := false;
				//Reset defaults
				Actions.MarketSetTrade(Market, 15, 5, 999);
				bSwitchTrade := false;
			end;
		end;
	end;
end;



//Turn off OnTick Commands so they dont break the script...
procedure Player3OnHouseDestroyed(aHouse: Integer; aDestroyerIndex: Integer);
var
	HouseOwner: Byte;
begin
	HouseOwner := States.HouseOwner(aHouse);
	if HouseOwner = PLAYER then
	begin
		case States.HouseType(aHouse) of
			18: bTownhallDestroyed := true;
			29: bMarketDestroyed := true;
		end;
	end;
end;



//Remove House Plans of all players that arent Player3
procedure Player3OnHousePlanPlaced(aPlayer, aX, aY, aType: Integer);
begin
	if ((aX >= 197) and (aY >= 230)) then
		if aPlayer <> 3 then
			Actions.PlanRemove(aPlayer, aX, aY);
end;